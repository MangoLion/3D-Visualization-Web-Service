
#include <iostream>
#include <stdio.h>
#include <cassert>
#include <math.h>
#include <stdlib.h>
#include <cstring>
#include <cstdio>
#include <vector>
#include <omp.h> // For OpenMP

/*Include for streamline tracer*/
#include "Steady3D.h"
#include "StreamlineTracer.h"
#include "StreamSurfaceTracer.h"

/* Include for VTK*/
#include <vtkSmartPointer.h>
#include <vtkPolyData.h>
#include <vtkStructuredPointsReader.h>
#include <vtkStructuredPoints.h>
#include <vtkDataArray.h>
#include <vtkImageData.h>
#include <vtkPointData.h>
#include <vtkStreamTracer.h>
#include <vtkPolyDataReader.h>
#include <vtkIdTypeArray.h>
#include <vtkIdList.h>
#include <vtkFloatArray.h>

/* Include for Json*/
#include <json.hpp> //nlohann json library from https://github.com/nlohmann/json

using namespace std;
using json = nlohmann::json;

/*--------------------Error messages-----------------------------*/
const string ERR_MSG_VALID_INPUT = "The input file has correct format!";
const string ERR_MSG_MEMORY = "Memory Issues!";
const string ERR_MSG_INVALID_INPUT = "The input file is invalid! Please upload a vtk structured point/grid file";
const string ERR_MSG_INVALID_VELOCITY = "The input file does not have the velocity field or the velocity field does not have 3 components.";
const string ERR_MSG_VALID_STREAMLINE_PARAMS = "The parameters are in the correct format!";
const string ERR_MSG_VALID_STREAMSURFACE_PARAMS = "The parameters are in the correct format!";

/*--------------------Global variables------------------------------*/
const int VELOCITY_COMPONENTS = 3; // (VX,VY,VZ) - for 2D, VZ is zero
//int dims[VELOCITY_COMPONENTS]; // dimensions dims[0] = NX, dims[1] = NY, dims[2] = NZ
//double spacing[VELOCITY_COMPONENTS]; // the space between two neighboring grid points
//double origin[VELOCITY_COMPONENTS]; // the origin of the simulation
//float dataRange[2 * VELOCITY_COMPONENTS]; // the range of data
//float* velocityData; // store the velocity field - size = dims[0] * dims[1] * dims[2] * 3

/*--------------------List of functions------------------------------*/

struct vtk_steady_vectorfield
{
	bool is_error;
	std::string response;
	int *dims;
	double *spacing;
	double *origin;
	float *data_range;
	float *velocity_data;
};

void loadRawDataFromFile(std::string inputFileName, char *&buffer, long &lSize); //Load the data from an input file

//Parse a char buffer read from a VTK file or pass from NodeJS
vtk_steady_vectorfield *parse_vtk(char *buffer, long int bufferSize);

string generateSampleStreamsurfaceParams();
string generateStreamsurfaces(string strParams, vtk_steady_vectorfield *vtkData);
void testNodeJSAddon_StreamsurfaceGeneration();
void freeMemory(float *velocityData);

/*---------------------Function implementation-----------------------*/
/*
	Load the data from an input file
	@param A input file name with the full path
	@return A char array buffer with its size
*/
void loadRawDataFromFile(std::string inputFileName, char *&buffer, long &lSize)
{

	std::cout << "Start loading the data set...\n";

	size_t result;

	// open the input file
	FILE *fp = fopen(inputFileName.c_str(), "rb");
	if (!fp)
	{
		printf("Could not find %s\n", inputFileName.c_str());
		return;
	}

	// obtain file size:
	fseek(fp, 0, SEEK_END);
	lSize = ftell(fp);
	rewind(fp);

	// allocate memory to contain the whole file:
	buffer = (char *)malloc(sizeof(char) * lSize);
	if (buffer == NULL)
	{
		fputs("Memory error", stderr);
		exit(2);
	}

	// copy the file into the buffer:
	result = fread(buffer, 1, lSize, fp);
	if (result != lSize)
	{
		fputs("Reading error", stderr);
		exit(3);
	}

	fclose(fp);
	std::cout << "Finishing loading the data set...\n";
}

/*
	Parse a char buffer read from a VTK file or pass from NodeJS
	@return A vtk_steady_vectorfield
*/
vtk_steady_vectorfield *parse_vtk(char *buffer, long int bufferSize)
{

	vtk_steady_vectorfield *vtkData = new vtk_steady_vectorfield;

	vtkData->is_error = false;
	vtkData->response = ERR_MSG_VALID_INPUT;
	vtkData->dims = new int[VELOCITY_COMPONENTS];
	vtkData->spacing = new double[VELOCITY_COMPONENTS];
	vtkData->origin = new double[VELOCITY_COMPONENTS];
	vtkData->data_range = new float[2 * VELOCITY_COMPONENTS];

	// Initialize vtkStructuredPointsReader
	vtkSmartPointer<vtkStructuredPointsReader> reader =
			vtkSmartPointer<vtkStructuredPointsReader>::New();
	reader->ReadFromInputStringOn();
	reader->SetInputString(buffer, bufferSize);
	reader->Update();

	// Verify structured grid/point VTK format
	if (!reader->IsFileStructuredGrid() && !reader->IsFileStructuredPoints())
	{ // if this vtk file is not stored in a structured grid/point format
		std::cout << ERR_MSG_INVALID_INPUT.c_str() << std::endl;
		vtkData->is_error = true;
		vtkData->response = ERR_MSG_INVALID_INPUT;
		return vtkData;
	}

	vtkSmartPointer<vtkStructuredPoints> structurePoint = reader->GetOutput();

	// Get the velocity field
	vtkSmartPointer<vtkDataArray> velocity = structurePoint->GetPointData()->GetArray("velocity");

	// Verify the velocity field
	if (!velocity)
	{ // if the input file does not have the velocity field
		vtkData->is_error = true;
		vtkData->response = ERR_MSG_INVALID_VELOCITY;
		return vtkData;
	}

	// Verity the number of velocity components (VX,VY,VZ) - for 2D, VZ is zero
	if (velocity->GetNumberOfComponents() != VELOCITY_COMPONENTS)
	{
		vtkData->is_error = true;
		vtkData->response = ERR_MSG_INVALID_VELOCITY;
		return vtkData;
	}

	// Finally, we have the correct input data

	// Get dimension
	structurePoint->GetDimensions(vtkData->dims);

	// Get spacing
	structurePoint->GetSpacing(vtkData->spacing);

	// Get the origin
	structurePoint->GetOrigin(vtkData->origin);

	vtkData->data_range[0] = vtkData->origin[0];
	vtkData->data_range[2] = vtkData->origin[1];
	vtkData->data_range[4] = vtkData->origin[2];
	vtkData->data_range[1] = vtkData->origin[0] + vtkData->spacing[0] * (vtkData->dims[0] + 1);
	vtkData->data_range[3] = vtkData->origin[1] + vtkData->spacing[1] * (vtkData->dims[1] + 1);
	vtkData->data_range[5] = vtkData->origin[2] + vtkData->spacing[2] * (vtkData->dims[2] + 1);

	// Print out the description about the data domain
	std::cout << "Data origin: [" << vtkData->origin[0] << "," << vtkData->origin[1] << "," << vtkData->origin[2] << "]\n";
	std::cout << "The data dimensions: " << vtkData->dims[0] << " x " << vtkData->dims[1] << " x " << vtkData->dims[2] << std::endl;
	std::cout << "Grid Spacing: [" << vtkData->spacing[0] << "," << vtkData->spacing[1] << "," << vtkData->spacing[2] << "]\n";

	// allocate dynamic memory to store velocity values
	vtkData->velocity_data = new float[vtkData->dims[0] * vtkData->dims[1] * vtkData->dims[2] * 3];

	if (vtkData->velocity_data == nullptr)
	{

		vtkData->is_error = true;
		vtkData->response = ERR_MSG_MEMORY;
	}

	int tid, nThreads;
	omp_set_num_threads(8);
#pragma omp parallel private(tid)
	{
#pragma omp for
		for (int k = 0; k < vtkData->dims[2]; k++)
			for (int j = 0; j < vtkData->dims[1]; j++)
				for (int i = 0; i < vtkData->dims[0]; i++)
				{
					int idx = k * vtkData->dims[1] * vtkData->dims[0] + j * vtkData->dims[0] + i;
					double *velo = velocity->GetTuple(idx);
					vtkData->velocity_data[VELOCITY_COMPONENTS * idx + 0] = velo[0];
					vtkData->velocity_data[VELOCITY_COMPONENTS * idx + 1] = velo[1];
					vtkData->velocity_data[VELOCITY_COMPONENTS * idx + 2] = velo[2];
				}
	}

	return vtkData;
}

void freeMemory(float *velocityData)
{
	if (velocityData)
		delete[] velocityData;
}

/*---------------------------------------------------------------------------
--------------------------Streamsurface generation---------------------------
-----------------------------------------------------------------------------*/
/*
	Generate artificial sample parameters for the streamsurface generation function
*/
string generateSampleStreamsurfaceParams()
{
	json streamlineParams;
	streamlineParams["direction"] = "both";
	streamlineParams["stepsize"] = 2;
	streamlineParams["length"] = 100;
	streamlineParams["seeding_points"] = {1.5, 4, 3, 2, 3.5, 2.6};
	streamlineParams["divergent_threshold_min"] = 3;
	streamlineParams["divergent_threshold_max"] = 5;
	return streamlineParams.dump();
}

/* Output a surface to the OBJ format. The surface is represented in the triangle mesh structure which has vertices and triangle connections*/
string outputSurfaceToOBJ(vector<Vector3f> &vertices, vector<Vector3i> &faces, vector<Vector3f> &normals)
{
	string objContent = "g object\n";

	// Output vertices
	for (int i = 0; i < vertices.size(); i++)
	{
		objContent += "v " + to_string(vertices[i](0)) + " ";
		objContent += to_string(vertices[i](1)) + " ";
		objContent += to_string(vertices[i](2)) + "\n";
	}

	// Output normals
	for (int i = 0; i < normals.size(); i++)
	{
		objContent += "vn " + to_string(normals[i](0)) + " ";
		objContent += to_string(normals[i](1)) + " ";
		objContent += to_string(normals[i](2)) + "\n";
	}

	// output faces
	for (int i = 0; i < faces.size(); i++)
	{
		objContent += "f " + to_string(faces[i](0)) + "//" + to_string(faces[i](0)) + " ";
		objContent += to_string(faces[i](1)) + "//" + to_string(faces[i](1)) + " ";
		objContent += to_string(faces[i](2)) + "//" + to_string(faces[i](2)) + "\n";
	}

	return objContent;
}

/*Save a string to a file. Just a testing function to test the obj file*/
void saveStringToFile(string str, string fileName)
{
	FILE *pFile;
	pFile = fopen(fileName.c_str(), "w");
	if (pFile)
	{
		fprintf(pFile, str.c_str());
	}
	fclose(pFile);
}

/*
	Generate streamlines given json input parameters and vtk_steady_vectorfield
	Sample input:
	{"direction":"both","stepsize":2,"length":100,"seeding_points":[1.5,4,3,2,3.5,2.6], "divergent_threshold":{ "min":3, "max":5 } }

	Sample output:
	{
		"is_error":false,
		"error_message":"The parameters are in the correct format!",
		"obj":"obj_values"
	}
*/
string generateStreamsurfaces(string strParams, vtk_steady_vectorfield *vtkData)
{
	json params = json::parse(strParams);
	json jsonResponse;
	int dimension_type;

	jsonResponse["is_error"] = false;
	jsonResponse["error_message"] = ERR_MSG_VALID_STREAMSURFACE_PARAMS;

	// Step 2: Initialize the steady vector field
	Steady3D vectorField;
	vectorField.setDomainDimension(vtkData->dims);
	vectorField.setOrigin(vtkData->origin);
	vectorField.setDataSpace(vtkData->spacing);
	vectorField.setDataRange(vtkData->data_range);
	vectorField.setData(vtkData->velocity_data);

	// Step 3: Initialize the streamsurface tracer
	StreamSurfaceTracer streamsurfaceTracer(vectorField);
	streamsurfaceTracer.setStepSize(params["stepsize"]);
	streamsurfaceTracer.setDivergence(params["divergent_threshold_min"], params["divergent_threshold_max"]);

	// Step 4: Get the seeding points from the input parameters
	vector<Vector3f> seedingCurve;
	int numbElements = params["seeding_points"].size();
	for (int i = 0; i < numbElements / 3; i++)
	{
		seedingCurve.push_back(Vector3f(params["seeding_points"][i * 3], params["seeding_points"][i * 3 + 1], params["seeding_points"][i * 3 + 2]));
	}

	// Step 5: Generate a stream surface
	vector<Vector3f> vertices;
	vector<Vector3f> normals;
	vector<Vector3i> faces;
	if (params["direction"] == "forward")
	{
		streamsurfaceTracer.setForward(true);
		streamsurfaceTracer.trace(seedingCurve, params["length"], vertices, faces, normals);
	}
	else if (params["direction"] == "backward")
	{
		streamsurfaceTracer.setForward(false);
		streamsurfaceTracer.trace(seedingCurve, params["length"], vertices, faces, normals);
	}
	else
	{
		streamsurfaceTracer.setForward(true);
		streamsurfaceTracer.trace(seedingCurve, params["length"], vertices, faces, normals);
		streamsurfaceTracer.setForward(false);
		streamsurfaceTracer.trace(seedingCurve, params["length"], vertices, faces, normals);
	}

	string objContent = outputSurfaceToOBJ(vertices, faces, normals);
	jsonResponse["obj"] = objContent.c_str();

	return jsonResponse.dump();
}

/* Test the NodeJS addon streamsurface generation function*/
void testNodeJSAddon_StreamsurfaceGeneration()
{
	// Step 1: Read the raw data from a input file and get the data buffer array
	// For NodeJS addon, you can skip this step and start from step 2
	string inputFileName = "/home/davim/Duong/Client_Server_Test/FlowVis20/C++/cylinder3D.vtk";
	char *buffer;
	long size;
	loadRawDataFromFile(inputFileName, buffer, size);
	std::cout << "File Size in bytes: " << size << std::endl;

	// Step 2: Parse the input data buffer array
	vtk_steady_vectorfield *vtkData = parse_vtk(buffer, size);

	// You can return this message to the NodeJS client
	// to let them know whether the uploaded file is in the correct format
	std::cout << "VTK Parsing Response Message:" << vtkData->response.c_str() << std::endl;
	std::cout << "Sample elocity Data: " << vtkData->velocity_data[100] << " " << vtkData->velocity_data[101] << " " << vtkData->velocity_data[102] << std::endl;

	// Step 3: Generate streamsurface given a input json string containing the necessary parameters
	// Step 3.1: Since I don't have the actual input string, I'll create an artificial one
	string jsonParams = generateSampleStreamsurfaceParams();
	std::cout << "Streamline Params: \n"
						<< jsonParams.c_str() << std::endl;

	// Step 3.2: Generate the streamsurface
	string jsonResponse = generateStreamsurfaces(jsonParams, vtkData);

	// Let save the obj file locally to test it
	json jsonSurface = json::parse(jsonResponse);
	saveStringToFile(jsonSurface["obj"], "test_output_surface.obj");

	// Step 4: Clean up memory
	freeMemory(vtkData->velocity_data);
}
int main(int argc, char **argv)
{

	testNodeJSAddon_StreamsurfaceGeneration();

	std::cout << "Press a key to finish...";
	std::getchar();

	return 0;
}
